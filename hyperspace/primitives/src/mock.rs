// Copyright 2022 ComposableFi
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

use ibc::core::ics02_client::context::ClientTypes;
use pallet_ibc::light_clients::{AnyClient, AnyClientMessage, AnyClientState, AnyConsensusState};

#[derive(Clone, Copy, Debug, Default, Eq, PartialEq)]
pub struct LocalClientTypes;

impl ClientTypes for LocalClientTypes {
	type AnyClientMessage = AnyClientMessage;
	type AnyClientState = AnyClientState;
	type AnyConsensusState = AnyConsensusState;
	type ClientDef = AnyClient;
}

#[test]
fn a() {
	use ibc::{
		core::ics03_connection::msgs::conn_open_ack::MsgConnectionOpenAck, protobuf::Protobuf,
	};
	let s = hex::decode("0a0c636f6e6e656374696f6e2d30120c636f6e6e656374696f6e2d301a230a0131120d4f524445525f4f524445524544120f4f524445525f554e4f52444552454422ab020a252f6962632e6c69676874636c69656e74732e7761736d2e76312e436c69656e7453746174651281020acc010a282f6962632e6c69676874636c69656e74732e6772616e6470612e76312e436c69656e745374617465129f010a202f99beef5902223f1b7271076682ff7eceed6909262f12b518721970bdcbf6be101f1801280230d00f380542240a2088dc3417d5058ec4b4503e0c12ea1a0a89be200fe98922423d4334014fa6b0ee100142240a20d17c2d7823ebf260fd138f2d7e27d114c0145d968b5ff5006125f2414fadae69100142240a20439660b36c6c03afafca027b910b4fecf99801834c62a5e6006f27d978de234f10011220d457206d53c0b3ed58a9a08f9666fa85e2be377ac279e4b83c324f794ddbf3021a0508d00f100522002a05656d7074792a040801105932c0040abc020ab9020a18636f6e6e656374696f6e732f636f6e6e656374696f6e2d30125b0a0930382d7761736d2d3012230a0131120d4f524445525f4f524445524544120f4f524445525f554e4f524445524544180222270a0f30372d74656e6465726d696e742d30120c636f6e6e656374696f6e2d301a060a046962632f1a0c0801180120012a040002b001222a080112260204b00120e836fe87f157707e64781ba38ae2bffb6e8b97720d7c888f97069de85e9791de20222c080112050406b001201a2120a0bd1f7230386e13a60fcdca6b7cc8c9652448d6b7d69e61eb8cc1f94a738cc5222c08011205060ab001201a212016f8a92c64d5ac9b1249a33e033e4c7721e9514f08e5348b725936eeed9fffbc222a080112260816b001200cc8247b264964299d1179064338165e7f200cf72dd23a93118800e5899a2d23200afe010afb010a036962631220c317a5cc35410e3624f86d913400d65a5682cfed7f88e9aa89069b6f202e9bf31a090801180120012a01002225080112210146b20f5b2a0f937792824ba03e427a7a78854e70e47b35d2a98acbe53896f913222708011201011a20aa650406ea0d76e39dd43d2ea6a91e3fdaa1c908fc21a7ca68e5e62cc8115639222708011201011a200909639b6df6fd806b3a276999ff6e1e54858e082bbd46f7f37ba73a19b86cef222508011221014485014a2c2ee7d268a4ccea1f7592a159fee196c03933691098cde28be89139222708011201011a20d4d64c82c2fda6c5a539412776d18a1fc79eac2cb7f4ded5c8e24cdd922c7ffd3aec050ae8030ae5030a1d636c69656e74732f30382d7761736d2d302f636c69656e74537461746512ab020a252f6962632e6c69676874636c69656e74732e7761736d2e76312e436c69656e7453746174651281020acc010a282f6962632e6c69676874636c69656e74732e6772616e6470612e76312e436c69656e745374617465129f010a202f99beef5902223f1b7271076682ff7eceed6909262f12b518721970bdcbf6be101f1801280230d00f380542240a2088dc3417d5058ec4b4503e0c12ea1a0a89be200fe98922423d4334014fa6b0ee100142240a20d17c2d7823ebf260fd138f2d7e27d114c0145d968b5ff5006125f2414fadae69100142240a20439660b36c6c03afafca027b910b4fecf99801834c62a5e6006f27d978de234f10011220d457206d53c0b3ed58a9a08f9666fa85e2be377ac279e4b83c324f794ddbf3021a0508d00f100522002a05656d7074791a0c0801180120012a040002b001222c080112050204b001201a21205a5e79bbb800034050c0d0c441fc611c411ba49efafe34691345c796b1d728e3222c08011205060cb001201a212071943a15c6587d985b27bd30ecaeab1c3b5f3da454de47c386dfb2a566ccc464222c080112050816b001201a212070834b9165662c80ee7d72cc7bf06ed79300d730c4b6315786f973647fccf98d0afe010afb010a036962631220c317a5cc35410e3624f86d913400d65a5682cfed7f88e9aa89069b6f202e9bf31a090801180120012a01002225080112210146b20f5b2a0f937792824ba03e427a7a78854e70e47b35d2a98acbe53896f913222708011201011a20aa650406ea0d76e39dd43d2ea6a91e3fdaa1c908fc21a7ca68e5e62cc8115639222708011201011a200909639b6df6fd806b3a276999ff6e1e54858e082bbd46f7f37ba73a19b86cef222508011221014485014a2c2ee7d268a4ccea1f7592a159fee196c03933691098cde28be89139222708011201011a20d4d64c82c2fda6c5a539412776d18a1fc79eac2cb7f4ded5c8e24cdd922c7ffd42e207c904dd0281af78568c9ff90e626df944753935885306a547abef03ea0130fcbc30f597f914e9e6233e9cddfba1d77b39761390b7684d5a1041adda7fd95ddc702604ffbd9eb4a3c15012d461124481e81ac4a29e30f309a75231f7066c0a077168d18e736f08066175726120e47751080000000005617572610101a256cc198aa52c2bec9872fda44a9d0c52f715dc422affb4821f3911cd60b8665aae97c795d23c5a902fe053ab7b5830a13196cf01ea90677d2cce6eace593852c280401000b9fdfd3ea850104a9018100111108400080b88822e718713a96f6c0d17882600a34adfa16f3cda9f621530e76d5a995c188800f6346ed91395f275be2d713c4b755a6a2ece412ecee3e6267cfd1906d0501dc80a1310e32d1fd04468b434dc9177d0b33e916207aab5f705e9fc0d0cc51d70901b10a0aa8030aa5030a28636c69656e74732f30382d7761736d2d302f636f6e73656e7375735374617465732f323030302d3512b8010a282f6962632e6c69676874636c69656e74732e7761736d2e76312e436f6e73656e7375735374617465128b010a5e0a2b2f6962632e6c69676874636c69656e74732e6772616e6470612e76312e436f6e73656e7375735374617465122f0a0b08b0bdc69e0610c08be40e1220e9e6233e9cddfba1d77b39761390b7684d5a1041adda7fd95ddc702604ffbd9e1220d457206d53c0b3ed58a9a08f9666fa85e2be377ac279e4b83c324f794ddbf302180122050a030102031a0c0801180120012a040002b001222a080112260204b00120c7737fe65c7e305cc16bbb3fafb61b83d4ef51233b6b4fb311486383d91a59c120222a080112260408b00120041010d7f686082a7c64b956a3c1bd665ebb03504a60722809ef344ff4b9933a20222a08011226060cb00120a2d12e42df061ad2c2390daca2703fd3053b29a5e521d51d4c927271b576dfa720222c080112050816b001201a212070834b9165662c80ee7d72cc7bf06ed79300d730c4b6315786f973647fccf98d0afe010afb010a036962631220c317a5cc35410e3624f86d913400d65a5682cfed7f88e9aa89069b6f202e9bf31a090801180120012a01002225080112210146b20f5b2a0f937792824ba03e427a7a78854e70e47b35d2a98acbe53896f913222708011201011a20aa650406ea0d76e39dd43d2ea6a91e3fdaa1c908fc21a7ca68e5e62cc8115639222708011201011a200909639b6df6fd806b3a276999ff6e1e54858e082bbd46f7f37ba73a19b86cef222508011221014485014a2c2ee7d268a4ccea1f7592a159fee196c03933691098cde28be89139222708011201011a20d4d64c82c2fda6c5a539412776d18a1fc79eac2cb7f4ded5c8e24cdd922c7ffd4a0508d00f1005523035794e5a6a5832346e3265673757364556616d6154584e51625743776368685468456153574237563347526a7448654c").unwrap();
	let d = MsgConnectionOpenAck::<LocalClientTypes>::decode(&mut s.as_slice()).unwrap();
	println!("{:#?}", d);
}

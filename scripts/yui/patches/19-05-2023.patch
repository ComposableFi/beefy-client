diff --git a/contracts/core/24-host/IBCStore.sol b/contracts/core/24-host/IBCStore.sol
index 5c72aec..35f50c7 100644
--- a/contracts/core/24-host/IBCStore.sol
+++ b/contracts/core/24-host/IBCStore.sol
@@ -19,7 +19,8 @@ abstract contract IBCStore {
     mapping(string => mapping(string => uint64)) internal nextSequenceSends;
     mapping(string => mapping(string => uint64)) internal nextSequenceRecvs;
     mapping(string => mapping(string => uint64)) internal nextSequenceAcks;
-    mapping(string => mapping(string => mapping(uint64 => uint8))) internal packetReceipts;
+    mapping(string => mapping(string => mapping(uint64 => uint8)))
+        internal packetReceipts;
     mapping(bytes => address[]) internal capabilities;
 
     // Host parameters
@@ -32,7 +33,9 @@ abstract contract IBCStore {
 
     // Storage accessors
 
-    function checkAndGetClient(string memory clientId) internal view returns (ILightClient) {
+    function checkAndGetClient(
+        string memory clientId
+    ) internal view returns (ILightClient) {
         address clientImpl = clientImpls[clientId];
         require(clientImpl != address(0));
         return ILightClient(clientImpl);
diff --git a/contracts/core/25-handler/IBCQuerier.sol b/contracts/core/25-handler/IBCQuerier.sol
index f6a73c3..2eef1ae 100644
--- a/contracts/core/25-handler/IBCQuerier.sol
+++ b/contracts/core/25-handler/IBCQuerier.sol
@@ -10,38 +10,51 @@ import "../24-host/IBCCommitment.sol";
 import "../25-handler/IBCPacketHandler.sol";
 
 abstract contract IBCQuerier is IBCStore {
-    function getClientState(string calldata clientId) external view returns (bytes memory, bool) {
+    function getClientState(
+        string calldata clientId
+    ) external view returns (bytes memory, bool) {
         return checkAndGetClient(clientId).getClientState(clientId);
     }
 
-    function getConsensusState(string calldata clientId, Height.Data calldata height)
-        external
-        view
-        returns (bytes memory consensusStateBytes, bool)
-    {
+    function getConsensusState(
+        string calldata clientId,
+        Height.Data calldata height
+    ) external view returns (bytes memory consensusStateBytes, bool) {
         return checkAndGetClient(clientId).getConsensusState(clientId, height);
     }
 
-    function getConnection(string calldata connectionId) external view returns (ConnectionEnd.Data memory, bool) {
+    function getConnection(
+        string calldata connectionId
+    ) external view returns (ConnectionEnd.Data memory, bool) {
         ConnectionEnd.Data storage connection = connections[connectionId];
-        return (connection, connection.state != ConnectionEnd.State.STATE_UNINITIALIZED_UNSPECIFIED);
+        return (
+            connection,
+            connection.state !=
+                ConnectionEnd.State.STATE_UNINITIALIZED_UNSPECIFIED
+        );
     }
 
-    function getChannel(string calldata portId, string calldata channelId)
-        external
-        view
-        returns (Channel.Data memory, bool)
-    {
+    function getChannel(
+        string calldata portId,
+        string calldata channelId
+    ) external view returns (Channel.Data memory, bool) {
         Channel.Data storage channel = channels[portId][channelId];
-        return (channel, channel.state != Channel.State.STATE_UNINITIALIZED_UNSPECIFIED);
+        return (
+            channel,
+            channel.state != Channel.State.STATE_UNINITIALIZED_UNSPECIFIED
+        );
     }
 
-    function getHashedPacketCommitment(string calldata portId, string calldata channelId, uint64 sequence)
-        external
-        view
-        returns (bytes32, bool)
-    {
-        bytes32 commitment = commitments[keccak256(IBCCommitment.packetCommitmentPath(portId, channelId, sequence))];
+    function getHashedPacketCommitment(
+        string calldata portId,
+        string calldata channelId,
+        uint64 sequence
+    ) external view returns (bytes32, bool) {
+        bytes32 commitment = commitments[
+            keccak256(
+                IBCCommitment.packetCommitmentPath(portId, channelId, sequence)
+            )
+        ];
         return (commitment, commitment != bytes32(0));
     }
 
@@ -50,23 +63,46 @@ abstract contract IBCQuerier is IBCStore {
         string calldata channelId,
         uint64 sequence
     ) external view returns (bytes32, bool) {
-        bytes32 commitment =
-            commitments[keccak256(IBCCommitment.packetAcknowledgementCommitmentPath(portId, channelId, sequence))];
+        bytes32 commitment = commitments[
+            keccak256(
+                IBCCommitment.packetAcknowledgementCommitmentPath(
+                    portId,
+                    channelId,
+                    sequence
+                )
+            )
+        ];
         return (commitment, commitment != bytes32(0));
     }
 
-    function hasPacketReceipt(string calldata portId, string calldata channelId, uint64 sequence)
-        external
-        view
-        returns (bool)
-    {
+    function hasPacketReceipt(
+        string calldata portId,
+        string calldata channelId,
+        uint64 sequence
+    ) external view returns (bool) {
         return packetReceipts[portId][channelId][sequence] == 1;
     }
 
-    function getNextSequenceSend(string calldata portId, string calldata channelId) external view returns (uint64) {
+    function getNextSequenceSend(
+        string calldata portId,
+        string calldata channelId
+    ) external view returns (uint64) {
         return nextSequenceSends[portId][channelId];
     }
 
+    function getNextSequenceRecv(
+        string calldata portId,
+        string calldata channelId
+    ) external view returns (uint64) {
+        return nextSequenceRecvs[portId][channelId];
+    }
+
+    function getConnectionEnd(
+        string calldata connectionId
+    ) external view returns (ConnectionEnd.Data memory) {
+        return connections[connectionId];
+    }
+
     function getExpectedTimePerBlock() external view returns (uint64) {
         return expectedTimePerBlock;
     }
